searchState.loadedDescShard("proc_macro_utils", 0, "Some useful functions on <code>proc_macro</code> and <code>proc_macro2</code> types\nTrait to test for delimiters of groups\nWrapper for <code>TokenStream::into_iter</code> allowing not only to …\nGeneric extensions for <code>proc_macro2::TokenStream</code>\nGeneric extensions for <code>proc_macro::TokenStream</code>\nGeneric extensions for <code>proc_macro2::TokenTree</code>\nGeneric extensions for <code>proc_macro::TokenTree</code>\nTrait to parse literals\nTrait to test for punctuation\nIf sets the <code>spacing</code> of a punct to <code>Alone</code>.\nAllows simple unit testing of proc macro implementations.\nAsserts that the <code>lhs</code> matches the tokens wrapped in braces …\nReturns the argument unchanged.\nGet the <code>Group</code> inside this token tree, or <code>None</code> if it isn’…\nGet the <code>Group</code> inside this token tree, or <code>None</code> if it isn’…\nGet the <code>Ident</code> inside this token tree, or <code>None</code> if it isn’…\nGet the <code>Ident</code> inside this token tree, or <code>None</code> if it isn’…\nCalls <code>U::from(self)</code>.\nGet the <code>Group</code> inside this token tree, or <code>None</code> if it isn’…\nGet the <code>Group</code> inside this token tree, or <code>None</code> if it isn’…\nGet the <code>Ident</code> inside this token tree, or <code>None</code> if it isn’…\nGet the <code>Ident</code> inside this token tree, or <code>None</code> if it isn’…\nGet the <code>Literal</code> inside this token tree, or <code>None</code> if it isn…\nGet the <code>Literal</code> inside this token tree, or <code>None</code> if it isn…\nGet the <code>Punct</code> inside this token tree, or <code>None</code> if it isn’…\nGet the <code>Punct</code> inside this token tree, or <code>None</code> if it isn’…\nCollects remaining tokens back into a <code>TokenStream</code>\nTests if token is followed by some none punctuation token …\nTests if the token is <code>&amp;</code>\nTests if the token is <code>*</code>\nTests if the token is <code>@</code>\nTests if the token is a group with  braces (<code>{ ... }</code>)\nTests if the token is a group with  brackets (<code>[ ... ]</code>)\nTests if the token is <code>^</code>\nTests if the token is <code>:</code>\nTests if the token is <code>,</code>\nTests if the token is <code>$</code>\nTests if the token is <code>.</code>\nChecks if there are remaining tokens\nTests if the token is <code>=</code>\nTests if the token is <code>!</code>\nTests if the token is <code>&gt;</code>\nTests if the token tree is a group.\nTests if the token tree is a group.\nTests if the token tree is an ident.\nTests if the token tree is an ident.\nTests if the token is a group with  no delimiters (…\nTests if token is followed by another punct and can …\nTests if the token is <code>&lt;</code>\nTests if the token tree is a literal.\nTests if the token tree is a literal.\nTests if the token is <code>-</code>\nTests if the token is a group with  parentheses (<code>( ... )</code>)\nTests if the token is <code>%</code>\nTests if the token is <code>|</code>\nTests if the token is <code>+</code>\nTests if the token is <code>#</code>\nTests if the token tree is a punctuation.\nTests if the token tree is a punctuation.\nTests if the token is <code>?</code>\nTests if the token is <code>&#39;</code>\nTests if the token is <code>;</code>\nTests if the token is <code>/</code>\nTests if the token is a string literal.\nTests if the token is <code>~</code>\nGet the <code>Literal</code> inside this token tree, or <code>None</code> if it isn…\nGet the <code>Literal</code> inside this token tree, or <code>None</code> if it isn…\nCreates a new <code>TokenParser</code> from a <code>TokenTree</code> iterator.\nCreates a new <code>TokenParser</code> from a <code>TokenTree</code> iterator, …\nReturns the next boolean literal\nReturns the next token if it is a braced group.\nReturns the next token if it is a bracketed group.\n“Parses” an expression\nReturns the next token if it is a <code>Group</code>.\nReturns the next token if it is an <code>Ident</code>.\nReturns the next token if it fulfills the condition …\nReturns the next tokens if they fulfill the conditions …\nReturns the next tokens if they fulfill the conditions …\nReturns the next ident if it matches the specified keyword.\nReturns the next token if it is a <code>Literal</code>.\nReturns the next token if it is a punctuation token tree …\nReturns the next <code>n</code> tokens.\nReturns the next <code>n</code> tokens. If the last token is a punct it…\nReturns the next token if it is a parenthesized group.\nReturns the next token if it is a <code>Punct</code>.\nReturns the next group of punctuation with <code>Punct::spacing</code> …\nReturns the next string literal\nReturns the next token tree as interpreted by the <code>tt</code> type …\nReturns the next token if it is a punctuation token tree <code>&amp;</code> …\nReturns the next token if it is a punctuation token tree <code>&amp;&amp;</code>…\nReturns the next token if it is a punctuation token tree <code>&amp;=</code>…\nReturns the next token if it is a punctuation token tree <code>@</code> …\nReturns the next token if it is a punctuation token tree <code>^</code> …\nReturns the next token if it is a punctuation token tree <code>^=</code>…\nReturns the next token if it is a punctuation token tree <code>:</code> …\nReturns the next token if it is a punctuation token tree <code>,</code> …\nReturns the next token if it is a punctuation token tree <code>$</code> …\nReturns the next token if it is a punctuation token tree <code>.</code> …\nReturns the next token if it is a punctuation token tree <code>..</code>…\nReturns the next token if it is a punctuation token tree …\nReturns the next token if it is a punctuation token tree …\nReturns the next token if it is a punctuation token tree <code>=</code> …\nReturns the next token if it is a punctuation token tree <code>==</code>…\nReturns the next token if it is a punctuation token tree <code>=&gt;</code>…\nReturns the next token if it is a punctuation token tree <code>&gt;=</code>…\nReturns the next token if it is a punctuation token tree <code>&gt;</code> …\nReturns the next token if it is a punctuation token tree <code>&lt;=</code>…\nReturns the next token if it is a punctuation token tree <code>&lt;</code> …\nReturns the next token if it is a punctuation token tree <code>-</code> …\nReturns the next token if it is a punctuation token tree <code>-=</code>…\nReturns the next token if it is a punctuation token tree <code>!=</code>…\nReturns the next token if it is a punctuation token tree <code>!</code> …\nReturns the next token if it is a punctuation token tree <code>|</code> …\nReturns the next token if it is a punctuation token tree <code>|=</code>…\nReturns the next token if it is a punctuation token tree <code>||</code>…\nReturns the next token if it is a punctuation token tree <code>::</code>…\nReturns the next token if it is a punctuation token tree <code>%</code> …\nReturns the next token if it is a punctuation token tree <code>%=</code>…\nReturns the next token if it is a punctuation token tree <code>+</code> …\nReturns the next token if it is a punctuation token tree <code>+=</code>…\nReturns the next token if it is a punctuation token tree <code>#</code> …\nReturns the next token if it is a punctuation token tree <code>?</code> …\nReturns the next token if it is a punctuation token tree <code>-&gt;</code>…\nReturns the next token if it is a punctuation token tree <code>;</code> …\nReturns the next token if it is a punctuation token tree <code>&lt;&lt;</code>…\nReturns the next token if it is a punctuation token tree …\nReturns the next token if it is a punctuation token tree <code>&gt;&gt;</code>…\nReturns the next token if it is a punctuation token tree …\nReturns the next token if it is a punctuation token tree <code>/</code> …\nReturns the next token if it is a punctuation token tree <code>/=</code>…\nReturns the next token if it is a punctuation token tree <code>*</code> …\nReturns the next token if it is a punctuation token tree <code>*=</code>…\nReturns the next token if it is a punctuation token tree <code>~</code> …\n“Parses” a type expression\nReturns all tokens while <code>test</code> evaluates to false.\nReturns all tokens while <code>test</code> evaluates to false. If the …\nReturns all tokens while <code>test</code> evaluates to true.\nReturns all tokens while <code>test</code> evaluates to true. If the …\nCreates a <code>TokenParser</code> from this token stream.\nCreates a <code>TokenParser</code> from this token stream.\nCreates a <code>TokenParser</code> from this token stream.\nCreates a <code>TokenParser</code> from this token stream.\nPeeks the next token without advancing the parser\nReturns the next token if it is abraced group, without …\nReturns the next token if it is abracketed group, without …\nReturns the next token if it is a <code>Group</code> without advancing …\nReturns the next token if it is an <code>Ident</code> without advancing …\nReturns the next tokens if they fulfill the conditions …\nReturns the next ident if it matches the specified keyword …\nReturns the next token if it is a <code>Literal</code> without …\nPeeks the <code>n</code>th token without advancing the parser\nReturns the <code>n</code>th token if it is a braced group, without …\nReturns the <code>n</code>th token if it is a bracketed group, without …\nReturns the <code>n</code>th token if it is a <code>Group</code> without advancing …\nReturns the <code>n</code>th token if it is an <code>Ident</code> without advancing …\nReturns the next tokens from <code>n</code> if they fulfill the …\nReturns the next tokens from <code>n</code> if they fulfill the …\nReturns the nth token if it matches the specified keyword …\nReturns the <code>n</code>th token if it is a <code>Literal</code> without advancing …\nReturns the <code>n</code>th token if it is a parenthesized group, …\nReturns the <code>n</code>th token if it is a <code>Punct</code> without advancing …\nPeeks the next token tree from the <code>n</code>th token as …\nReturns the <code>n</code>th token if it is a punctuation token tree <code>&amp;</code> …\nReturns the <code>n</code>th token if it is a punctuation token tree <code>&amp;&amp;</code> …\nReturns the <code>n</code>th token if it is a punctuation token tree <code>&amp;=</code> …\nReturns the <code>n</code>th token if it is a punctuation token tree <code>@</code> …\nReturns the <code>n</code>th token if it is a punctuation token tree <code>^</code> …\nReturns the <code>n</code>th token if it is a punctuation token tree <code>^=</code> …\nReturns the <code>n</code>th token if it is a punctuation token tree <code>:</code> …\nReturns the <code>n</code>th token if it is a punctuation token tree <code>,</code> …\nReturns the <code>n</code>th token if it is a punctuation token tree <code>$</code> …\nReturns the <code>n</code>th token if it is a punctuation token tree <code>.</code> …\nReturns the <code>n</code>th token if it is a punctuation token tree <code>..</code> …\nReturns the <code>n</code>th token if it is a punctuation token tree <code>...</code>…\nReturns the <code>n</code>th token if it is a punctuation token tree <code>..=</code>…\nReturns the <code>n</code>th token if it is a punctuation token tree <code>=</code> …\nReturns the <code>n</code>th token if it is a punctuation token tree <code>==</code> …\nReturns the <code>n</code>th token if it is a punctuation token tree <code>=&gt;</code> …\nReturns the <code>n</code>th token if it is a punctuation token tree <code>&gt;=</code> …\nReturns the <code>n</code>th token if it is a punctuation token tree <code>&gt;</code> …\nReturns the <code>n</code>th token if it is a punctuation token tree <code>&lt;=</code> …\nReturns the <code>n</code>th token if it is a punctuation token tree <code>&lt;</code> …\nReturns the <code>n</code>th token if it is a punctuation token tree <code>-</code> …\nReturns the <code>n</code>th token if it is a punctuation token tree <code>-=</code> …\nReturns the <code>n</code>th token if it is a punctuation token tree <code>!=</code> …\nReturns the <code>n</code>th token if it is a punctuation token tree <code>!</code> …\nReturns the <code>n</code>th token if it is a punctuation token tree <code>|</code> …\nReturns the <code>n</code>th token if it is a punctuation token tree <code>|=</code> …\nReturns the <code>n</code>th token if it is a punctuation token tree <code>||</code> …\nReturns the <code>n</code>th token if it is a punctuation token tree <code>::</code> …\nReturns the <code>n</code>th token if it is a punctuation token tree <code>%</code> …\nReturns the <code>n</code>th token if it is a punctuation token tree <code>%=</code> …\nReturns the <code>n</code>th token if it is a punctuation token tree <code>+</code> …\nReturns the <code>n</code>th token if it is a punctuation token tree <code>+=</code> …\nReturns the <code>n</code>th token if it is a punctuation token tree <code>#</code> …\nReturns the <code>n</code>th token if it is a punctuation token tree <code>?</code> …\nReturns the <code>n</code>th token if it is a punctuation token tree <code>-&gt;</code> …\nReturns the <code>n</code>th token if it is a punctuation token tree <code>;</code> …\nReturns the <code>n</code>th token if it is a punctuation token tree <code>&lt;&lt;</code> …\nReturns the <code>n</code>th token if it is a punctuation token tree <code>&lt;&lt;=</code>…\nReturns the <code>n</code>th token if it is a punctuation token tree <code>&gt;&gt;</code> …\nReturns the <code>n</code>th token if it is a punctuation token tree <code>&gt;&gt;=</code>…\nReturns the <code>n</code>th token if it is a punctuation token tree <code>/</code> …\nReturns the <code>n</code>th token if it is a punctuation token tree <code>/=</code> …\nReturns the <code>n</code>th token if it is a punctuation token tree <code>*</code> …\nReturns the <code>n</code>th token if it is a punctuation token tree <code>*=</code> …\nReturns the <code>n</code>th token if it is a punctuation token tree <code>~</code> …\nReturns the next token if it is aparenthesized group, …\nReturns the next token if it is a <code>Punct</code> without advancing …\nReturns the specified <code>range</code> of tokens.\nReturns the specified <code>range</code> of tokens. If the last token …\nPeeks the next token tree as interpreted by the <code>tt</code> type in …\nReturns the next token if it is a punctuation token tree <code>&amp;</code> …\nReturns the next token if it is a punctuation token tree <code>&amp;&amp;</code>…\nReturns the next token if it is a punctuation token tree <code>&amp;=</code>…\nReturns the next token if it is a punctuation token tree <code>@</code> …\nReturns the next token if it is a punctuation token tree <code>^</code> …\nReturns the next token if it is a punctuation token tree <code>^=</code>…\nReturns the next token if it is a punctuation token tree <code>:</code> …\nReturns the next token if it is a punctuation token tree <code>,</code> …\nReturns the next token if it is a punctuation token tree <code>$</code> …\nReturns the next token if it is a punctuation token tree <code>.</code> …\nReturns the next token if it is a punctuation token tree <code>..</code>…\nReturns the next token if it is a punctuation token tree …\nReturns the next token if it is a punctuation token tree …\nReturns the next token if it is a punctuation token tree <code>=</code> …\nReturns the next token if it is a punctuation token tree <code>==</code>…\nReturns the next token if it is a punctuation token tree <code>=&gt;</code>…\nReturns the next token if it is a punctuation token tree <code>&gt;=</code>…\nReturns the next token if it is a punctuation token tree <code>&gt;</code> …\nReturns the next token if it is a punctuation token tree <code>&lt;=</code>…\nReturns the next token if it is a punctuation token tree <code>&lt;</code> …\nReturns the next token if it is a punctuation token tree <code>-</code> …\nReturns the next token if it is a punctuation token tree <code>-=</code>…\nReturns the next token if it is a punctuation token tree <code>!=</code>…\nReturns the next token if it is a punctuation token tree <code>!</code> …\nReturns the next token if it is a punctuation token tree <code>|</code> …\nReturns the next token if it is a punctuation token tree <code>|=</code>…\nReturns the next token if it is a punctuation token tree <code>||</code>…\nReturns the next token if it is a punctuation token tree <code>::</code>…\nReturns the next token if it is a punctuation token tree <code>%</code> …\nReturns the next token if it is a punctuation token tree <code>%=</code>…\nReturns the next token if it is a punctuation token tree <code>+</code> …\nReturns the next token if it is a punctuation token tree <code>+=</code>…\nReturns the next token if it is a punctuation token tree <code>#</code> …\nReturns the next token if it is a punctuation token tree <code>?</code> …\nReturns the next token if it is a punctuation token tree <code>-&gt;</code>…\nReturns the next token if it is a punctuation token tree <code>;</code> …\nReturns the next token if it is a punctuation token tree <code>&lt;&lt;</code>…\nReturns the next token if it is a punctuation token tree …\nReturns the next token if it is a punctuation token tree <code>&gt;&gt;</code>…\nReturns the next token if it is a punctuation token tree …\nReturns the next token if it is a punctuation token tree <code>/</code> …\nReturns the next token if it is a punctuation token tree <code>/=</code>…\nReturns the next token if it is a punctuation token tree <code>*</code> …\nReturns the next token if it is a punctuation token tree <code>*=</code>…\nReturns the next token if it is a punctuation token tree <code>~</code> …\nGet the <code>Punct</code> inside this token tree, or <code>None</code> if it isn’…\nGet the <code>Punct</code> inside this token tree, or <code>None</code> if it isn’…\nPushes a single <code>TokenTree</code> onto the token stream.\nPushes a single <code>TokenTree</code> onto the token stream.\nReturns span of the next token or <code>Span::call_site()</code>.\nReturns the string contents if it is a string literal.")